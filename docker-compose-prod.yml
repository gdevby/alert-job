version: "3.9"
services:
  nginx-proxy:
    restart: always
    container_name: nginx-proxy
    image: nginxproxy/nginx-proxy
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - html:/usr/share/nginx/html
      - ./config/vhost-nginx:/etc/nginx/vhost.d
      - certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./config/nginx-conf-d:/etc/nginx/conf.d
    environment:
      TZ: Europe/Moscow
  nginx-proxy-acme:
    restart: always
    image: nginxproxy/acme-companion
    volumes:
      - certs:/etc/nginx/certs:rw
      - ./conf/vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - acme:/etc/acme.sh
    environment:
      DEFAULT_EMAIL: $acme_email
      NGINX_PROXY_CONTAINER: nginx-proxy
      TZ: Europe/Moscow
     # - HTTPS_METHOD=redirect
    depends_on:
      - "nginx-proxy"
  db:
    restart: always
    image: mariadb:11.1.2-jammy
    volumes:
      - database-volume:/var/lib/mysql
      - ./config/database:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=$database_user_password
      - MYSQL_USER=alert_job_user
      - MYSQL_PASSWORD=$database_user_password
      - TZ=Europe/Moscow
  keycloak:
    restart: always
    image: quay.io/keycloak/keycloak
    command:
      - "start"
      - "--hostname-url=https://$domain/keycloak"
      - "--hostname-admin-url=https://$domain/keycloak"
      - "--db mariadb"
      - "--db-url-host db"
      - "--db-username alert_job_user"
      - "--db-password $database_user_password"
      #- health-enabled=true
      #- metrics-enabled=true
    environment:
      VIRTUAL_HOST: $domain
      VIRTUAL_PORT: 8080
      VIRTUAL_PATH: /keycloak
      LETSENCRYPT_HOST: $domain
#      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
      KEYCLOAK_ADMIN: $keycloak_admin
      KEYCLOAK_ADMIN_PASSWORD: $keycloak_admin_password
      KEYCLOAK_USER: $keycloak_admin
      KEYCLOAK_PASSWORD: $keycloak_admin_password
      TZ: Europe/Moscow
    depends_on:
      - db
    mem_limit: 612m
  config:
    restart: always
    image: rg.gdev.by/alert-job/alert-job-config:$alert_job_version
    environment:
      - "SPRING_PROFILES_ACTIVE=dev,native"
      - "spring.cloud.config.server.native.search-locations=file:///alert-job-config-repo"
      - "spring.cloud.config.server.overrides.logging.level.by.gdev=$logger_level"
      - TZ=Europe/Moscow
    volumes:
      - "$local_config_directory:/alert-job-config-repo"
    mem_limit: 512m
  eureka:
    restart: always
    image: rg.gdev.by/alert-job/alert-job-eureka:$alert_job_version 
    environment:
       - "SPRING_PROFILES_ACTIVE=dev"
       - TZ=Europe/Moscow
    depends_on:
      config:
        condition: service_healthy
    mem_limit: 512m
  #set directory rules sudo chmod 777 files_prod/elasticsearc
  elasticsearch:
    restart: always
    image: elasticsearch:8.9.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx1024m
      - xpack.security.enabled=false
      - TZ=Europe/Moscow
    volumes:
       - $elasticsearch_directory:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/?pretty"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 60s
  logstash:
    restart: always
    image: logstash:8.9.2
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - $logstash_config_directory:/etc/logstash/conf.d
    environment:
       - TZ=Europe/Moscow
       - "LS_JAVA_OPTS=-Xms256m -Xmx1024m"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/?pretty"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - elasticsearch
    mem_limit: 1024m
  front:
    restart: always
    image: rg.gdev.by/alert-job/front:$alert_job_version
    environment:
      VIRTUAL_HOST: $domain
      VIRTUAL_PATH: /front
      LETSENCRYPT_HOST: $domain
      LETSENCRYPT_EMAIL: $acme_email
      TZ: Europe/Moscow
    mem_limit: 256m
  gateway:
    restart: always
    image: rg.gdev.by/alert-job/alert-job-gateway:$alert_job_version
    environment:
      VIRTUAL_HOST: $domain
      VIRTUAL_PATH: /
      LETSENCRYPT_HOST: $domain
      LETSENCRYPT_EMAIL: $acme_email
      VIRTUAL_PORT: 8015
      SPRING_PROFILES_ACTIVE: prod
      TZ: Europe/Moscow
    depends_on:
      config:
        condition: service_healthy
      eureka:
        condition: service_healthy
    mem_limit: 512m
  notification:
    restart: always
    image: rg.gdev.by/alert-job/notification-alert-job:$alert_job_version
    environment:
       - SPRING_PROFILES_ACTIVE=prod
       - TZ=Europe/Moscow
    depends_on:
      config:
        condition: service_healthy
      eureka:
        condition: service_healthy
    mem_limit: 512m
  parser:
    restart: always
    image: rg.gdev.by/alert-job/parser-alert-job:$alert_job_version
    environment:
       - "SPRING_PROFILES_ACTIVE=prod"
       - TZ=Europe/Moscow
    volumes:
       - "$parser_config_directory:/etc/parser/config"
    depends_on:
      config:
        condition: service_healthy
      eureka:
        condition: service_healthy
      db:
        condition: service_started
    mem_limit: 1g    
  core:
    restart: always
    image: rg.gdev.by/alert-job/core-alert-job:$alert_job_version
    environment:
       - "SPRING_PROFILES_ACTIVE=prod"
       - TZ=Europe/Moscow
    depends_on:
      config:
        condition: service_healthy
      eureka:
        condition: service_healthy
      db:
        condition: service_started
    mem_limit: 512m  
  prometheus:
    restart: always
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - $prometheus_directory/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    environment:
      TZ: Europe/Moscow
  grafana:
    restart: always
    container_name: grafana 
    image: "grafana/grafana:latest"
    volumes:
    - grafana-volume:/var/lib/grafana
    environment:
      VIRTUAL_HOST: $grafana_domain
      LETSENCRYPT_EMAIL: $acme_email
      LETSENCRYPT_HOST: $grafana_domain
      VIRTUAL_PORT: 3000
      GF_SERVER_ROOT_URL: "https://$grafana_domain"
      GF_SERVER_DOMAIN: $grafana_domain
      TZ: Europe/Moscow
volumes:
  database-volume: {}
  grafana-volume: {}
  certs: {}      
  vhost: {}
  html: {}
  nginx-conf-d: {}
  acme: {}
networks:
  alert-job:
    driver: bridge      